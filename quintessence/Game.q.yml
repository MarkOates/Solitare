
properties:


  - name: stock
    type: Deck
    init_with: '{}'
    getter: true
  - name: waste
    type: Deck
    init_with: '{}'
    getter: true
  - name: tableau
    type: std::vector<std::vector<std::tuple<bool, Card>>>
    init_with: '{}'
    getter: true
  - name: foundations
    type: std::vector<std::vector<Deck>>
    init_with: '{}'
    getter: true
  - name: state
    type: std::string
    init_with: '"playing"'


functions:


  - name: start
    type: void
    body: |
      stock = DeckFactory::generate_classic_52_playing_card_deck();

      tableau.clear();
      tableau.resize(7);

      waste.clear();

      foundations.clear();
      foundations.resize(4);

      set_state_playing();

      return;
    body_dependency_symbols:
      - DeckFactory


  - name: flip_topmost_card_on_tableau_column_to_face_up
    parameters:
      - name: tableau_column_num
        type: int
        default_argument: 0
    body: |
      // tableau_column_num must be valid
      // 

      // if topmost card is already flipped up, do nothing
      return;


  - name: place_top_stock_card_on_waste
    body: |
      // TODO
      return;


  - name: place_top_waste_card_on_foundation
    parameters:
      - name: foundation_index_num
        type: int
        default_argument: 0
    body: |
      // TODO
      return;


  - name: replenish_stock_with_waste
    body: |
      // stock must be empty
      // waste must not be empty

      // TODO
      return;


  - name: move_cards_from_tableau_row_to_other_tableau_row
    parameters:
      - name: source_tableau_column_num
        type: int
        default_argument: 0
      - name: destination_tableau_column_num
        type: int
        default_argument: 0
      - name: num_cards_from_topmost_card
        type: int
        default_argument: 0
    body: |
      // TODO
      return;


  - name: move_topmost_tableau_row_card_to_foundation
    parameters:
      - name: tableau_column_num
        type: int
        default_argument: 0
    body: |
      // tableau_column_num must be valid
      // tableau_column_num must not be empty
      // the topmost card in the tableau_column_num must be face-up

      // TODO
      return;


  - name: set_state_playing
    private: true
    body: |
      state = "playing";
      return;


  - name: check_game_win_or_lose
    private: true
    body: |
      // TODO
      return;


  - name: set_state_game_won
    private: true
    body: |
      state = "game_won";
      return;


  - name: set_state_game_lost
    private: true
    body: |
      state = "game_over";
      return;


  - name: stock_num_cards
    type: int
    body: |
      return stock.num_cards();


dependencies:


  - symbol: Deck
    headers: [ Deck.hpp ]
  - symbol: std::vector<std::vector<Deck>>
    headers: [ vector, Deck.hpp ]
  - symbol: DeckFactory
    headers: [ DeckFactory.hpp ]
  - symbol: std::vector<std::vector<std::tuple<bool, Card>>>
    headers: [ vector, tuple, Card.hpp ]

